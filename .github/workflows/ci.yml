name: ci

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


defaults:
  run:
    # This forces shell to be login shell and load the user's profile that activates the conda environment
    # https://github.com/marketplace/actions/setup-micromamba#about-login-shells
    shell: bash -leo pipefail {0}

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      #TODO: Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, OSS clang>
      # 2. <Linux, Release, OSS clang>
      # 3. <macOS, Release, OSS clang>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            profile: clang
          - os: ubuntu-latest
            profile: clang
          - os: macos-latest
            profile: clang
    env:
      CONAN_PROFILE: "${{ github.workspace }}/.conan/profiles/${{ matrix.profile }}"
    steps:
    - uses: actions/checkout@v4

    - uses: mamba-org/setup-micromamba@v1
      with:
        environment-file: environment.yml
        init-shell: bash

    - name: "REMOVE ME: Template versions"
      run: |
        set -e
        set -x

        python --version
        conan --version
        cmake --version
        ninja --version

        env | sort

    - name: "REMOVE ME: Conan templates and build selfcheck"
      run: |
        if [[ -f conanfile.py ]]; then
          conan create . --profile:all="${CONAN_PROFILE}" -s build_type="${{ matrix.build_type }}"
        fi

        set -x

        mkdir foo_exe foo_lib
        pushd foo_exe
        conan new cmake_exe -d name=foo_exe -d version=0.1.0
        conan create . --profile:all="${CONAN_PROFILE}" -s build_type="${{ matrix.build_type }}"
        popd

        pushd foo_lib
        conan new cmake_lib -d name=foo_lib -d version=0.1.0
        conan create . --profile:all="${CONAN_PROFILE}" -s build_type="${{ matrix.build_type }}"

    # TODO: Migrate to conan steps
    # - name: Set reusable strings
    #   # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
    #   id: strings
    #   run: |
    #     echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # - name: Configure CMake
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: >
    #     cmake -B ${{ steps.strings.outputs.build-output-dir }}
    #     -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
    #     -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
    #     -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}"
    #     -S ${{ github.workspace }}

    # - name: Build
    #   # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config "${{ matrix.build_type }}"

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config "${{ matrix.build_type }}"
